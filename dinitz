from collections import deque

class Dinic:
    def __init__(self, graph):
        self.graph = graph
        self.N = len(graph)
        self.level = [0] * self.N

    def bfs(self, s, t):
        self.level = [-1] * self.N
        self.level[s] = 0
        queue = deque([s])
        while queue:
            u = queue.popleft()
            for v, cap, flow in self.graph[u]:
                if self.level[v] < 0 and flow < cap:
                    self.level[v] = self.level[u] + 1
                    queue.append(v)
        return self.level[t] >= 0

    def dfs(self, u, t, f):
        if u == t:
            return f
        for i in range(len(self.graph[u])):
            v, cap, flow = self.graph[u][i]
            if self.level[v] == self.level[u] + 1 and flow < cap:
                df = self.dfs(v, t, min(f, cap - flow))
                if df > 0:
                    self.graph[u][i] = (v, cap, flow + df)
                    for j in range(len(self.graph[v])):
                        k, rev_cap, rev_flow = self.graph[v][j]
                        if k == u:
                            self.graph[v][j] = (k, rev_cap, rev_flow - df)
                            break
                    return df
        return 0

    def max_flow(self, source, sink):
        max_flow = 0
        while self.bfs(source, sink):
            while True:
                df = self.dfs(source, sink, float('inf'))
                if df > 0:
                    max_flow += df
                else:
                    break
        return max_flow

# Пример использования
graph = {
    0: [(1, 3, 0), (2, 2, 0)],
    1: [(2, 5, 0)],
    2: [(3, 2, 0)],
    3: []
}

dinic = Dinic(graph)
source, sink = 0, 3
max_flow = dinic.max_flow(source, sink)
print(f"Максимальный поток от вершины {source} к вершине {sink}: {max_flow}")
